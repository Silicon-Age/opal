<project
	xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
>
	<!-- As far as I (Jonah) know, the most relevant Maven commands for this project are `mvn compile` (exactly what it sounds like), `mvn package` (build the executable jar), and `mvn source:jar` (build the source jar used to create Javadoc). -->
	
	<modelVersion>4.0.0</modelVersion>
	
	<groupId>com.opal</groupId>
	<artifactId>opal</artifactId>
	<version>1.1.0</version>
	
	<properties>
		<maven.compiler.source>21</maven.compiler.source>
		<maven.compiler.target>21</maven.compiler.target>
		<maven.compiler.release>21</maven.compiler.release>
	</properties>
	
	<repositories>
		<!-- jitpack.io is a service that compiles GitHub projects into artifacts (based on tagged releases)
		"on the fly" so they can be referenced by Maven (and maybe Gradle).  In the medium term, we may return
		to using this for the siliconage artifact, but we are not currently.
		-->
		<!--
		<repository>
			<id>jitpack.io</id>
			<url>https://jitpack.io</url>
		</repository>
		-->
		
		<!-- Instead, the siliconage-{version}.jar needs to be put in a special local directory.  That turns
		out to be:
		
		{$project.basedir}/lib/rrh/siliconage/${version}
		
		For instance, for me, that is actually
		
		/media/mirror/home/topquarkj/opal/lib/rrh/siliconage/1.1.0/siliconage-1.1.0.jar
		
		Note that the "rrh" comes from the groupId in the <dependency> element; it was basically chosen out of a
		need to put something there.
		
		Note also that this file URL supplised for this <repository> is just a prefix of the above path.
		-->
		<repository>
			<id>local-jars</id>
			<url>file://${project.basedir}/lib</url>
		</repository>
	</repositories>
	
	<dependencies>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.0.1</version>
		</dependency>
		
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-collections4</artifactId>
			<version>4.0</version>
		</dependency>
		
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.5</version>
		</dependency>
		
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
			<version>2.18.0</version>
		</dependency>
		
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>2.18.0</version>
		</dependency>
		
		<!-- FIXME: We should be working to get rid of this. -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-1.2-api</artifactId>
			<version>2.18.0</version>
		</dependency>
		
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.9.1</version>
		</dependency>
		
		<!-- Fetched through jitpack -->
		<!--
		<dependency>
			<groupId>com.github.Silicon-Age</groupId>
			<artifactId>siliconage</artifactId>
			<version>1.0.1</version>
		</dependency>
		-->

		<!-- This dependency (siliconage.jar) is loaded from the local file system rather than a central repository
		or a just-in-time artifact-maker like jitpack.  The build will not work until jar has been manually
		copied into the correct place.  See the local-jars <repository> element above for more information. -->
		<dependency>
			<groupId>rrh</groupId> <!-- Placeholder; we have to put something.  This becomes a subdirectory. -->
			<artifactId>siliconage</artifactId> <!-- Another subdirectory -->
			<version>1.1.0</version> <!-- A final subdirectory. -->
		</dependency>
	</dependencies>
</project>
